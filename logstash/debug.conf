input {
		stdin {}
}

filter {

 # We handle the syslog part of the Cisco PIX/ASA messages
 	 grok {
 			add_tag => "cisco-fw"
			# patterns_dir => "/etc/logstash/patterns"
			match => {
							 "message" => [
							 "%{SYSLOGTIMESTAMP:syslog_timestamp} %{IP:log_source}\s:%{SYSLOGTIMESTAMP1:@timestamp}:%{GREEDYDATA:message}"]
							 }
			overwrite => ["message"]
			}
# 		syslog_pri {
# 							 tags => "cisco-fw"
# 							 }
		# mutate {
		# 			 # tags => "cisco-fw"
		# 			 exclude_tags => "_grokparsefailure"
		# 			 replace => [ "@source_host", "%{log_source}" ]
		# 			 replace => [ "@message", "%{log_message}" ]
		# 			 }

# 		# for optional fields (device name in message, Cisco syslog tag)
		grok {
				 tags => "cisco-fw"
				 # patterns_dir => "/etc/logstash/patterns"
				 # pattern => "(?:%{SYSLOGHOST:device} )?(?:: )?%%{CISCOFWTAG:ciscotag}:%{GREEDYDATA}"

				 match => [
								"message", "%{CISCOFW106015}",
     		 			  "message", "%{CISCOFW106001}",
								"message", "%{CISCOFW106006_106007_106010}",
								"message", "%{CISCOFW106014}",
								"message", "%{CISCOFW106021}",
								"message", "%{CISCOFW106023}",
								"message", "%{CISCOFW106100}",
								"message", "%{CISCOFW110002}",
								"message", "%{CISCOFW302010}",
								"message", "%{CISCOFW302013_302014_302015_302016}",
								"message", "%{CISCOFW302020_302021}",
								"message", "%{CISCOFW305011}",
								"message", "%{CISCOFW313001_313004_313008}",
								"message", "%{CISCOFW313005}",
								"message", "%{CISCOFW402117}",
								"message", "%{CISCOFW402119}",
								"message", "%{CISCOFW419001}",
								"message", "%{CISCOFW419002}",
								"message", "%{CISCOFW500004}",
								"message", "%{CISCOFW602303_602304}",
								"message", "%{CISCOFW710001_710002_710003_710005_710006}",
								"message", "%{CISCOFW713172}",
								"message", "%{CISCOFW733100}"
								]
				 }
 
# # we extract fields
# 		 # grok {
# 		 # 			tags => "cisco-fw"
# 		 # 			break_on_match => false
# 		 # 			patterns_dir => "/etc/logstash/patterns"
# 		 # 			pattern => []
# 		 # 		}
 
		date {
				 tags => "cisco-fw"
		# timestamp8601 => ISO8601
				 match => ["timestamp",
							"MMM dd HH:mm:ss.SSS",
							"MMM d HH:mm:ss.SSS",
							"MMM dd HH:mm:ss",
							"MMM d HH:mm:ss",
							"MMM dd yyyy HH:mm:ss.SSS",
							"MMM d yyyy HH:mm:ss.SSS",
							"MMM dd yyyy HH:mm:ss",
							"MMM d yyyy HH:mm:ss"
		]
		# innertimestamp => [
		# 					"MMM dd HH:mm:ss.SSS",
		# 					"MMM d HH:mm:ss.SSS",
		# 					"MMM dd HH:mm:ss",
		# 					"MMM d HH:mm:ss",
		# 					"MMM dd yyyy HH:mm:ss.SSS",
		# 					"MMM d yyyy HH:mm:ss.SSS",
		# 					"MMM dd yyyy HH:mm:ss",
		# 					"MMM d yyyy HH:mm:ss",
		# 					"yyyy-MM-dd HH:mm:ss.SSS",
		# 					"yyyy-MM-dd HH:mm:ss"
		# ]
 
}

	# 		grok {
 	# 	 			 	match => { 
	# 						# "message" => ["%{IP:client_ip}\|%{TIMESTAMP_ISO8601:timestamp}\|%{GREEDYDATA:action}\|%{GREEDYDATA:code}\|%{GREEDYDATA}\|%{GREEDYDATA}\|%{GREEDYDATA:phone_num}\|%{GREEDYDATA:agent}\|%{GREEDYDATA:refer}"]					
	# 	 			 }
	# 				 # overwrite => [ "message" ]
	# 				 add_field => ["received_at", "%{@timestamp}"]
  # 		}
	# geoip {
  #   source => "client_ip"
  # }
	# date {
	# 				match => ["timestamp", "yyyyMMddHHmmss", "yyyy-MM-dd HH:mm:ss"]
	# 				add_tag => ["dated"]
	# }

  uuid { 
    target => "@uuid"
		# remove_field =>  ["timestamp"]
  	}
}

output {
			stdout {
    	 					 codec => rubydebug }
}
